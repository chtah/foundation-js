//1
/*---------------------------------------------------1
const arr = [1, -4, 2, 0];
const mapRevertSign = () => {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    newArr.push(0 - arr[i]);
  }
  console.log(newArr);
};
mapRevertSign(arr); // [-1, 4, -2, 0]
1*/

//2
/*---------------------------------------------------2
const arr = [1, 2, 3, 4, 5];
const reverse = () => {
  let newArr = [];
  for (let i = arr.length - 1; i >= 0; i--) {
    newArr.push(arr[i]);
  }
  console.log(newArr);
};
reverse(arr); // [5, 4, 3, 2, 1]
2*/

//3
/*---------------------------------------------------3
const isMember = (mem, arr) => {
  a = false;
  for (let i = 0; i < arr.length; i++) {
    if (mem === arr[i]) {
      a = true;
    }
  }
  console.log(a);
};
//isMember(5, [1, 3, 7, 12]); // false
//isMember("john", ["jane", "jim", "john"]); // true
3*/

//4
/*---------------------------------------------------4
const arr = [10, 20, 10, 20, 30, 50, 60, 100];
const unique = () => {
  let newArr = [];

  for (let i = 0; i < arr.length; i++) {
    if (arr.indexOf(arr[i]) === i) {
      newArr.push(arr[i]);
    }
  }
  console.log(newArr);
};
unique(arr); // [10, 20, 30, 50, 60, 100]
4*/

//5
/*---------------------------------------------------5
const draw = (a) => {
  b = "";
  for (let i = 0; i < a; i++) {
    for (let j = 0; j < a; j++) {
      b += "*";
      if (j === a - 1) {
        b += "\n";
      }
    }
  }
  console.log(b);
};
draw(5);

// *****
// *****
// *****
// *****
// *****
5*/

//6
/*---------------------------------------------------6
const drawNg = (a) => {
  b = "";
  for (let i = 0; i < a; i++) {
    for (let j = 0; j < a; j++) {
      if (i >= j) {
        b += "*";
      }
      if (j === a - 1) {
        b += "\n";
      }
    }
  }
  console.log(b);
};
drawNg(5);

// *
// **
// ***
// ****
// *****
6*/

//7
/*---------------------------------------------------7
const class1 = ["Alice", "Bob", "John", "Jane"];
const class2 = ["John", "Foobar", "Barbaz", "Foobaz", "Bob"];

const mutual = (arr1, arr2) => {
  let newArr = [];
  for (let i = 0; i < arr2.length; i++) {
    for (let j = 0; j < arr1.length; j++) {
      if (arr1[j] === arr2[i]) {
        newArr.push(arr2[i]);
      }
    }
  }
  return newArr;
};

console.log(mutual(class1, class2)); // ["John", "Bob"]
7*/

//8
/*---------------------------------------------------8
const fizzBuzz = (a) => {
  for (i = 1; i <= a; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      console.log("FizzBuzz");
    } else if (i % 3 === 0) {
      console.log("Fizz");
    } else if (i % 5 === 0) {
      console.log("Buzz");
    } else {
      console.log(i);
    }
  }
};
fizzBuzz(20);

// 1
// 2
// Fizz
// 4
// Buzz
// Fizz
// 7
// 8
// Fizz
// Buzz
// 11
// Fizz
// 13
// 14
// FizzBuzz
// 16
// 17
// Fizz
// 19
// Buzz
8*/

//9
/*---------------------------------------------------9
const gcd = (a, b) => {
  let c = 0;
  if (a % b === 0 || b % a === 0) {
    if (a < b) {
      c = a;
    } else {
      c = b;
    }
  } else if (a > b) {
    c = a % b;
  } else {
    c = b % a;
  }
  console.log(c);
};
gcd(10, 15); // 5
gcd(18, 12); // 6
gcd(3, 2); // 1
gcd(12, 24); //test
9*/

//10
/*---------------------------------------------------10
const arr = [120, 112, 111, 130, 169, 101];

const filterLt = (n, arr) => {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < n) {
      newArr.push(arr[i]);
    }
  }
  console.log(newArr);
};

filterLt(0, arr); // []
filterLt(112, arr); // [111, 101]
10*/

//11
/*---------------------------------------------------11
const arr = [120, 112, 111, 130, 169, 101];

const filterGt = (n, arr) => {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > n) {
      newArr.push(arr[i]);
    }
  }
  console.log(newArr);
};

filterGt(0, arr); // [120, 112, 111, 130, 169, 101]
filterGt(112, arr); // [120, 130, 169]
11*/

//12
/*---------------------------------------------------12
const compoundedReturn = (a, b, c) => {
  let result = a * (1 + b / 100) ** c;
  console.log(result.toFixed(0));
};
compoundedReturn(100, 1, 1); // 101
compoundedReturn(100, 10, 1); // 110
compoundedReturn(100, 10, 2); // 121
12*/

//13
/*---------------------------------------------------13
const mean = (arr) => {
  let result = 0;
  for (let i = 0; i < arr.length; i++) {
    if (typeof arr[i] === typeof i) {
      result += arr[i];
      if (i === arr.length - 1) {
        result /= arr.length;
      }
    } else {
      result = null;
      break;
    }
  }
  console.log(result);
};
mean([1, 2, 3]); // 2
mean([1, "foo", 3]); // null

// arr = [1, 2, 3];
// console.log(typeof arr[0]);
13*/

//14
/*---------------------------------------------------14
const mid = (arr) => {
  let newArr = [];
  if (arr.length % 2 === 0) {
    newArr.push(arr[arr.length / 2 - 1]);
    newArr.push(arr[arr.length / 2]);
  } else {
    newArr.push(arr[arr.length / 2 - 0.5]);
  }
  console.log(newArr);
};

mid(["john"]); // ["john"]
mid(["foo", "bar", "baz"]); // ["bar"]
mid([1, 2, 3, 4]); // [2, 3]
mid([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // for test
14*/

//15
/*---------------------------------------------------********************************15
const arr = [3, 2, 1, 12, 13, 11];
arr.sort((a, b) => {
  return a - b;
});
console.log(arr); // [1, 11, 12, 13, 2, 3]
15*/

//16
/*---------------------------------------------------16
const median = (arr) => {
  let result = 0;
  arr.sort((a, b) => {
    return a - b;
  });
  if (arr.length % 2 === 0) {
    result = (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;
  } else {
    result = arr[arr.length / 2 - 0.5];
  }
  console.log(result);
};
median([2, 1, 5, 3, 4]); // 3
median([2, 1, 5, 3, 4, 6, 8, 7]); // 4.5
16*/

//17
/*---------------------------------------------------17
const initArr = (val, len) => {
  let newArr = [];
  for (let i = 0; i < len; i++) {
    newArr.push(val);
  }
  console.log(newArr);
};

initArr(0, 5); // [0, 0, 0, 0, 0]
initArr(5, 10);
17*/

//18
/*---------------------------------------------------18
const arr = [
  [1, 2, 3],
  [100, 200],
  [10, 20],
];

const flatMap = () => {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    for (j = 0; j < arr[i].length; j++) {
      newArr.push(arr[i][j]);
    }
  }
  console.log(newArr);
};
flatMap(arr); // [1, 2, 3, 100, 200, 10, 20]
18*/

//19
/*---------------------------------------------------19
const arr = [
  [1, 2, 3],
  [100, 200],
  [10, 20],
];

const mapMean = (arr) => {
  let newArr = [];
  result = 0;
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr[i].length; j++) {
      result += arr[i][j];
    }
    result /= arr[i].length;
    newArr.push(result);
    result = 0;
  }
  console.log(newArr);
};
mapMean(arr); // [2, 150, 15]
19*/

//20
/*---------------------------------------------------20
const fib = (end) => {
  let start = 0;
  let next = 1;
  let result = 0;
  let fibResult = "";
  for (let i = 0; i < end; i++) {
    fibResult += result + ", ";
    start = next;
    next = result;
    result = start + next;
  }
  console.log(fibResult.substring(0, fibResult.length - 2));
};

//0, 1, 1, 2, 3, 5, 8, 13, 21, ...
fib(2); // 0, 1
fib(3); // 0, 1, 1
fib(4); // 0, 1, 1, 2
fib(5); // 0, 1, 1, 2, 3
fib(6); // 0, 1, 1, 2, 3, 5
20*/

//21
/*---------------------------------------------------21
const bar = "Bar";
const foo = "Foo";
const fooFire = "FooðŸ”¥";

//console.log(bar.charCodeAt(0));
const toBytes = (text) => {
  let newArr = [];
  for (let i = 0; i < text.length; i++) {
    if (text.charCodeAt(i) <= 255) {
      newArr.push(text.charCodeAt(i));
    }
  }
  console.log(newArr);
};

//.charCodeAt(i)
toBytes(bar); // [ 66, 97, 114 ]
toBytes(foo); // [ 70, 111, 111 ]
toBytes(fooFire); // [ 70, 111, 111 ] because the emoji is invalid ASCII
21*/

//M1
/*---------------------------------------------------M1
const arr = [12, -13, 14, 4, 2, -1, -18];

const maxNegMinPos = (arr) => {
  let posArr = [];
  let negArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < 0) {
      negArr.push(0 - arr[i]);
    } else {
      posArr.push(arr[i] - 0);
    }
  }
  negArr.sort((a, b) => {
    return a - b;
  });
  posArr.sort((a, b) => {
    return a - b;
  });

  console.log("MaxNeg is", -negArr[0]);
  console.log("MinPos is", posArr[0]);
};
maxNegMinPos(arr);

// MaxNeg is -1
// MinPos is 2
M1*/

//M2
/*---------------------------------------------------M2
const prime = (num) => {
  let numArr = [];
  let primeArr = [];
  for (let i = 2; i < num * 10; i++) {
    numArr.push(i);
  }
  for (let i = 0; i < numArr.length; i++) {
    if (
      numArr[i] % 2 !== 0 &&
      numArr[i] % 3 !== 0 &&
      numArr[i] % 5 !== 0 &&
      numArr[i] % 7 !== 0
    ) {
      primeArr.push(numArr[i]);
    }
  }
  primeArr.unshift(2, 3, 5, 7);
  let resultArr = [];
  resultArr = primeArr.slice(0, num);
  console.log(resultArr);
  numArr.sort();
};
prime(4); // [2, 3, 5, 7]
prime(5); // [2, 3, 5, 7, 11]
prime(999); //for test
M2*/

//M3
/*---------------------------------------------------M3
const chart = [110, 105, 95, 9, 80, 17, 120, 115, 11];

const drawDown = (arr) => {
  let subNumArr = [];
  let newSubArr = [];
  for (i = 0; i < arr.length; i++) {
    subNumArr.push(arr[i] - arr[i + 1]);
  }
  subNumArr.pop();
  for (i = 0; i < subNumArr.length; i++) {
    if (subNumArr[i] >= 0) {
      newSubArr.push(subNumArr[i]);
    } else {
      newSubArr.push(0 - subNumArr[i]);
    }
  }
  console.log(Math.max(...newSubArr));
};
drawDown(chart); // 109
M3*/
